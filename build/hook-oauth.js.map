{"version":3,"names":[],"mappings":"","sources":["hook-oauth.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nvar WinChan = require(\"./winchan\");\n\n/**\n * @module Hook.Plugin\n * @class OAuth\n */\nHook.Plugin.OAuth = function (client) {\n  this.client = client;\n};\n\nHook.Plugin.OAuth.prototype.popup = function (provider, options) {\n  var self = this,\n      href = this.client.url(\"oauth/\" + provider),\n      href_relay = this.client.url(\"oauth/relay_frame\"),\n      window_width = 500,\n      window_height = 500,\n      window_left = screen.width / 2 - window_width / 2,\n      window_top = screen.height / 2 - window_height / 2;\n\n  href += \"&\" + this.client.serialize({ options: options });\n\n  var promise = new Promise((function (resolve, reject) {\n    // auto-resolve promise when user is already logged in.\n    if (this.client.auth.currentUser && this.client.auth.currentUser[provider + \"_id\"]) {\n      resolve(this.client.auth.currentUser);\n    } else {\n      WinChan.open({\n        url: href,\n        relay_url: href_relay,\n        window_features: \"menubar=0,location=0,resizable=0,scrollbars=0,status=0,dialog=1,width=\" + window_width + \",height=\" + window_height + \",top=\" + window_top + \",left=\" + window_left\n      }, function (err, r) {\n        // err is a string on failure, otherwise r is the response object\n\n        if (!err && r) {\n          // register user token\n          self.client.auth._registerToken(r);\n\n          // resolve oauth promise\n          resolve(r);\n        }\n\n        if (err && err == \"unknown closed window\") {\n          reject(\"canceled\");\n        }\n      });\n    }\n  }).bind(this));\n\n  return promise;\n};\n\n// Register plugin\nHook.Plugin.Manager.register(\"oauth\", Hook.Plugin.OAuth);\n\n},{\"./winchan\":2}],2:[function(require,module,exports){\n/*\n * WinChan\n * forked: https://github.com/endel/winchan/tree/patch-1\n */\n\"use strict\";\n\nmodule.exports = (function WinChan() {\n  var RELAY_FRAME_NAME = \"__winchan_relay_frame\";\n  var CLOSE_CMD = \"die\";\n\n  // a portable addListener implementation\n  function addListener(w, event, cb) {\n    if (w.attachEvent) w.attachEvent(\"on\" + event, cb);else if (w.addEventListener) w.addEventListener(event, cb, false);\n  }\n\n  // a portable removeListener implementation\n  function removeListener(w, event, cb) {\n    if (w.detachEvent) w.detachEvent(\"on\" + event, cb);else if (w.removeEventListener) w.removeEventListener(event, cb, false);\n  }\n\n  // checking for IE8 or above\n  function isInternetExplorer() {\n    var rv = -1; // Return value assumes failure.\n    var ua = navigator.userAgent;\n    if (navigator.appName === \"Microsoft Internet Explorer\") {\n      var re = new RegExp(\"MSIE ([0-9]{1,}[.0-9]{0,})\");\n      if (re.exec(ua) != null) rv = parseFloat(RegExp.$1);\n    }\n    // IE > 11\n    else if (ua.indexOf(\"Trident\") > -1) {\n      var re = new RegExp(\"rv:([0-9]{2,2}[.0-9]{0,})\");\n      if (re.exec(ua) !== null) {\n        rv = parseFloat(RegExp.$1);\n      }\n    }\n\n    return rv >= 8;\n  }\n\n  // checking Mobile Firefox (Fennec)\n  function isFennec() {\n    try {\n      // We must check for both XUL and Java versions of Fennec.  Both have\n      // distinct UA strings.\n      var userAgent = navigator.userAgent;\n      return userAgent.indexOf(\"Fennec/\") != -1 || userAgent.indexOf(\"Firefox/\") != -1 && userAgent.indexOf(\"Android\") != -1; // Java\n    } catch (e) {}\n    return false;\n  }\n\n  // feature checking to see if this platform is supported at all\n  function isSupported() {\n    return window.JSON && window.JSON.stringify && window.JSON.parse && window.postMessage;\n  }\n\n  // given a URL, extract the origin\n  function extractOrigin(url) {\n    if (!/^https?:\\/\\//.test(url)) url = window.location.href;\n    var a = document.createElement(\"a\");\n    a.href = url;\n\n    // remove protocol from evaluated hostname, since IE10+ appends it by default\n    var re = ({ \"http:\": /:80$/, \"https:\": /:443$/ })[a.protocol];\n    var host = re ? a.host.replace(re, \"\") : a.host;\n\n    return a.protocol + \"//\" + host;\n  }\n\n  // find the relay iframe in the opener\n  function findRelay() {\n    var loc = window.location;\n    var frames = window.opener.frames;\n    for (var i = frames.length - 1; i >= 0; i--) {\n      try {\n        if (frames[i].location.protocol === window.location.protocol && frames[i].location.host === window.location.host && frames[i].name === RELAY_FRAME_NAME) {\n          return frames[i];\n        }\n      } catch (e) {}\n    }\n    return;\n  }\n\n  var isIE = isInternetExplorer();\n\n  if (isSupported()) {\n    /*  General flow:\n     *                  0. user clicks\n     *  (IE SPECIFIC)   1. caller adds relay iframe (served from trusted domain) to DOM\n     *                  2. caller opens window (with content from trusted domain)\n     *                  3. window on opening adds a listener to 'message'\n     *  (IE SPECIFIC)   4. window on opening finds iframe\n     *                  5. window checks if iframe is \"loaded\" - has a 'doPost' function yet\n     *  (IE SPECIFIC5)  5a. if iframe.doPost exists, window uses it to send ready event to caller\n     *  (IE SPECIFIC5)  5b. if iframe.doPost doesn't exist, window waits for frame ready\n     *  (IE SPECIFIC5)  5bi. once ready, window calls iframe.doPost to send ready event\n     *                  6. caller upon reciept of 'ready', sends args\n     */\n    return {\n      open: function open(opts, cb) {\n        if (!cb) throw \"missing required callback argument\";\n\n        // test required options\n        var err;\n        if (!opts.url) err = \"missing required 'url' parameter\";\n        if (!opts.relay_url) err = \"missing required 'relay_url' parameter\";\n        if (err) setTimeout(function () {\n          cb(err);\n        }, 0);\n\n        // supply default options\n        if (!opts.window_name) opts.window_name = null;\n        if (!opts.window_features || isFennec()) opts.window_features = undefined;\n\n        // opts.params may be undefined\n\n        var iframe;\n\n        // sanity check, are url and relay_url the same origin?\n        var origin = extractOrigin(opts.url);\n        if (origin !== extractOrigin(opts.relay_url)) {\n          return setTimeout(function () {\n            cb(\"invalid arguments: origin of url and relay_url must match\");\n          }, 0);\n        }\n\n        var messageTarget;\n\n        if (isIE) {\n          // first we need to add a \"relay\" iframe to the document that's served\n          // from the target domain.  We can postmessage into a iframe, but not a\n          // window\n          iframe = document.createElement(\"iframe\");\n          // iframe.setAttribute('name', framename);\n          iframe.setAttribute(\"src\", opts.relay_url);\n          iframe.style.display = \"none\";\n          iframe.setAttribute(\"name\", RELAY_FRAME_NAME);\n          document.body.appendChild(iframe);\n          messageTarget = iframe.contentWindow;\n        }\n\n        var w = window.open(opts.url, opts.window_name, opts.window_features);\n\n        if (!messageTarget) messageTarget = w;\n\n        // lets listen in case the window blows up before telling us\n        var closeInterval = setInterval(function () {\n          if (w && w.closed) {\n            cleanup();\n            if (cb) {\n              cb(\"unknown closed window\");\n              cb = null;\n            }\n          }\n        }, 500);\n\n        var req = JSON.stringify({ a: \"request\", d: opts.params });\n\n        // cleanup on unload\n        function cleanup() {\n          if (iframe) document.body.removeChild(iframe);\n          iframe = undefined;\n          if (closeInterval) closeInterval = clearInterval(closeInterval);\n          removeListener(window, \"message\", onMessage);\n          removeListener(window, \"unload\", cleanup);\n          if (w) {\n            try {\n              w.close();\n            } catch (securityViolation) {\n              // This happens in Opera 12 sometimes\n              // see https://github.com/mozilla/browserid/issues/1844\n              messageTarget.postMessage(CLOSE_CMD, origin);\n            }\n          }\n          w = messageTarget = undefined;\n        }\n\n        addListener(window, \"unload\", cleanup);\n\n        function onMessage(e) {\n          if (e.origin !== origin) {\n            return;\n          }\n          try {\n            var d = JSON.parse(e.data);\n            if (d.a === \"ready\") messageTarget.postMessage(req, origin);else if (d.a === \"error\") {\n              cleanup();\n              if (cb) {\n                cb(d.d);\n                cb = null;\n              }\n            } else if (d.a === \"response\") {\n              cleanup();\n              if (cb) {\n                cb(null, d.d);\n                cb = null;\n              }\n            }\n          } catch (err) {}\n        }\n\n        addListener(window, \"message\", onMessage);\n\n        return {\n          close: cleanup,\n          focus: function focus() {\n            if (w) {\n              try {\n                w.focus();\n              } catch (e) {}\n            }\n          }\n        };\n      },\n      onOpen: function onOpen(cb) {\n        var o = \"*\";\n        var msgTarget = isIE ? findRelay() : window.opener;\n        if (!msgTarget) throw \"can't find relay frame\";\n        function doPost(msg) {\n          msg = JSON.stringify(msg);\n          if (isIE) msgTarget.doPost(msg, o);else msgTarget.postMessage(msg, o);\n        }\n\n        function onMessage(e) {\n          // only one message gets through, but let's make sure it's actually\n          // the message we're looking for (other code may be using\n          // postmessage) - we do this by ensuring the payload can\n          // be parsed, and it's got an 'a' (action) value of 'request'.\n          var d;\n          try {\n            d = JSON.parse(e.data);\n          } catch (err) {}\n          if (!d || d.a !== \"request\") return;\n          removeListener(window, \"message\", onMessage);\n          o = e.origin;\n          if (cb) {\n            // this setTimeout is critically important for IE8 -\n            // in ie8 sometimes addListener for 'message' can synchronously\n            // cause your callback to be invoked.  awesome.\n            setTimeout(function () {\n              cb(o, d.d, function (r) {\n                cb = undefined;\n                doPost({ a: \"response\", d: r });\n              });\n            }, 0);\n          }\n        }\n\n        function onDie(e) {\n          if (e.data === CLOSE_CMD) {\n            try {\n              window.close();\n            } catch (o_O) {}\n          }\n        }\n        addListener(isIE ? msgTarget : window, \"message\", onMessage);\n        addListener(isIE ? msgTarget : window, \"message\", onDie);\n\n        // we cannot post to our parent that we're ready before the iframe\n        // is loaded. (IE specific possible failure)\n        try {\n          doPost({ a: \"ready\" });\n        } catch (e) {\n          // this code should never be exectued outside IE\n          addListener(msgTarget, \"load\", function (e) {\n            doPost({ a: \"ready\" });\n          });\n        }\n\n        // if window is unloaded and the client hasn't called cb, it's an error\n        var onUnload = function onUnload() {\n          try {\n            // IE8 doesn't like this...\n            removeListener(isIE ? msgTarget : window, \"message\", onDie);\n          } catch (ohWell) {}\n          if (cb) doPost({ a: \"error\", d: \"client closed window\" });\n          cb = undefined;\n          // explicitly close the window, in case the client is trying to reload or nav\n          try {\n            window.close();\n          } catch (e) {}\n        };\n        addListener(window, \"unload\", onUnload);\n        return {\n          detach: function detach() {\n            removeListener(window, \"unload\", onUnload);\n          }\n        };\n      }\n    };\n  } else {\n    return {\n      open: function open(url, winopts, arg, cb) {\n        setTimeout(function () {\n          cb(\"unsupported browser\");\n        }, 0);\n      },\n      onOpen: function onOpen(cb) {\n        setTimeout(function () {\n          cb(\"unsupported browser\");\n        }, 0);\n      }\n    };\n  }\n})();\n// XUL\n\n// IE7 blows up here, do nothing\n\n},{}]},{},[1]);\n"],"file":"hook-oauth.js","sourceRoot":"/source/"}